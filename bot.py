import asyncio
import random
import aiosqlite
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, F
from aiogram.types import ChatPermissions
from aiogram.filters import Command
from aiogram.enums import ChatMemberStatus

# === –í–°–¢–ê–í–¨ –°–í–û–ô –¢–û–ö–ï–ù –û–¢ BOTFATHER ===
API_TOKEN = "8278496682:AAEpQdJdFfO1oW-IjO7SOynDegr-pVlVhK4"

# === –†–ê–ù–ì–ò –ò –û–ü–´–¢ ===
RANKS = [
    ("–ü–µ–ø–µ–ª", 0), ("–ù–æ–≤–∏—á–æ–∫", 100), ("–ò—Å–∫–∞—Ç–µ–ª—å", 235), ("–ü–æ—Å–≤—è—â—ë–Ω–Ω—ã–π", 505),
    ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –ø–æ—Ä–æ–≥–∞", 810), ("–°—Ç—Ä–∞–∂ —Ç–µ–Ω–µ–π", 1250), ("–ü–ª–∞–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è", 1725),
    ("–ü–∏—Å–∞—Ä—å –ê—Ä—Ö–∏–≤–∞", 2335), ("–°–º–æ—Ç—Ä–∏—Ç–µ–ª—å –ø—ã–ª–∏", 2980), ("–ì–æ–ª–æ—Å –∑–∞–±–≤–µ–Ω–∏—è", 3760),
    ("–¢–∫–∞—á —Å—É–¥–µ–±", 4575), ("–û–∫–æ –ê—Ä—Ö–∏–≤–∞", 5525), ("–¢–µ–Ω—å –ø—Ä–µ–¥–∑–Ω–∞–º–µ–Ω–æ–≤–∞–Ω–∏—è", 6510),
    ("–ù–æ—Å–∏—Ç–µ–ª—å –∑–Ω–∞–Ω–∏–π", 7630), ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –∫–ª—é—á–µ–π", 8785), ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –≤—Ä–∞—Ç", 10075),
    ("–í–µ—Å—Ç–Ω–∏–∫ –∏—Å—Ç–∏–Ω—ã", 11400), ("–ü—Ä–∏–∑—Ä–∞–∫ –∫–æ–¥–∞", 12860), ("–°—É–¥—å—è –ø–∞–º—è—Ç–∏", 14355),
    ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Ç–µ–Ω–µ–π", 15985), ("–í–ª–∞–¥—ã–∫–∞ –∑–∞–ø–∏—Å–µ–π", 17650), ("–ü—Ä–æ—Ä–æ–∫ –±–∞–π—Ç–æ–≤", 19450),
    ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —É—Ä–æ–≤–Ω–µ–π", 21285), ("–ê—Ä—Ö–∏–≤–∞—Ä–∏—É—Å", 23255), ("–¢–µ–Ω—å –≤–µ—á–Ω–æ—Å—Ç–∏", 25260),
    ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∫–æ–¥–µ–∫—Å–∞", 27400), ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –ø—ã–ª–∏", 29575), ("–ì–æ—Å–ø–æ–¥–∏–Ω –∑–∞–±–≤–µ–Ω–∏—è", 31885),
    ("–í–ª–∞–¥—ã–∫–∞ –ê—Ä—Ö–∏–≤–∞", 34230), ("–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π", 36710), ("–¢–µ–Ω—å –±—ã—Ç–∏—è", 39225),
    ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏", 41875), ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –±—ã—Ç–∏—è", 44560), ("–ì–æ—Å–ø–æ–¥–∏–Ω –∫–æ–¥–∞", 47380),
    ("–ê—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä —Ç–µ–Ω–µ–π", 50235), ("–ü–æ–≤–µ–ª–∏—Ç–µ–ª—å –≤—Ä–µ–º–µ–Ω–∏", 53225), ("–ë–æ–≥ –ê—Ä—Ö–∏–≤–∞", 59410),
    ("–í–Ω–µ –≤—Ä–µ–º–µ–Ω–∏", 68605), ("–í–Ω–µ –∫–æ–¥–∞", 77665), ("–í–Ω–µ –ê—Ä—Ö–∏–≤–∞", 86660)
]

# === –ü–†–û–†–û–ß–ï–°–¢–í–ê ===
PROPHECIES = [
    "üïØÔ∏è –ö–æ–≥–¥–∞ –ª—É–Ω–∞ –∫–æ—Å–Ω—ë—Ç—Å—è –æ–∫–Ω–∞ —Å–µ—Ä–≤–µ—Ä–∞, —Ç—ã —É—Å–ª—ã—à–∏—à—å —Å—Ç–æ–Ω —É–¥–∞–ª—è–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤.",
    "üåë –ü–æ–¥ –º–∞—Å–∫–æ–π –∞–Ω–æ–Ω–∏–º–∞ —Å–∫—Ä—ã–≤–∞–µ—Ç—Å—è —Ç–æ—Ç, –∫—Ç–æ –∑–Ω–∞–µ—Ç —Ç–≤–æ—é —Å–º–µ—Ä—Ç–Ω—É—é –¥–∞—Ç—É.",
    "üìú –í –ø–æ–ª–Ω–æ—á—å —Ç—ã –Ω–∞–π–¥—ë—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ —Ç–≤–æ–∏–º –ø–æ—á–µ—Ä–∫–æ–º. –ù–æ —Ç—ã –µ–≥–æ –Ω–µ –ø–∏—Å–∞–ª.",
    "üî• –ö—Ç–æ-—Ç–æ —Å—Ç–∞–≤–∏—Ç —Ç–µ–±–µ ¬´+¬ª –∏–∑ –ø—É—Å—Ç–æ—Ç—ã. –ï–≥–æ –∞–∫–∫–∞—É–Ω—Ç ‚Äî –ø—Ä–∏–∑—Ä–∞–∫.",
    "üëÅÔ∏è –¢—ã —É–≤–∏–¥–∏—à—å —Å–≤–æ—ë –∏–º—è –≤ –ª–æ–≥–∞—Ö, –¥–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö 31.12.2099. –ù–µ —á–∏—Ç–∞–π –¥–∞–ª—å—à–µ.",
    "‚ö° –û–¥–∏–Ω –∫–ª–∏–∫ ‚Äî –∏ —Ç—ã –ø–µ—Ä–µ—Å–µ—á—ë—à—å –≥—Ä–∞–Ω—å. –û–±—Ä–∞—Ç–Ω–æ –Ω–µ –±—É–¥–µ—Ç.",
    "üíÄ –¢–µ–Ω—å –≤ —á–∞—Ç–µ ‚Äî –Ω–µ –æ—à–∏–±–∫–∞. –û–Ω–∞ –Ω–∞–±–ª—é–¥–∞–µ—Ç. –û–Ω–∞ –∂–¥—ë—Ç.",
    "üïØÔ∏è –ê—Ä—Ö–∏–≤ —à–µ–ø—á–µ—Ç: —Ç–≤–æ–π —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å ‚Äî –∂–µ—Ä—Ç–≤–æ–ø—Ä–∏–Ω–æ—à–µ–Ω–∏–µ.",
    "üåë –ù–µ –¥–æ–≤–µ—Ä—è–π —Ç–æ–º—É, —É –∫–æ–≥–æ –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏. –û–Ω ‚Äî –ø—É—Å—Ç–æ—Ç–∞, –ø—Ä–∏—à–µ–¥—à–∞—è –ø–æ–≥–ª–æ—Ç–∏—Ç—å.",
]

# === –î–û–°–¢–ò–ñ–ï–ù–ò–Ø ===
ACHIEVEMENTS = {
    1: ("–®—ë–ø–æ—Ç –ê—Ä—Ö–∏–≤–∞", "–¢—ã –Ω–∞–ø–∏—Å–∞–ª 100 —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ê—Ä—Ö–∏–≤–µ.", False),
    2: ("–û–≥–Ω–∏ –ø—É—Å—Ç–æ—Ç—ã", "–¢—ã –æ—Å—Ç–∞–≤–∏–ª 1000 —Å–ª–µ–¥–æ–≤ –≤ –ø—É—Å—Ç–æ—Ç–µ.", False),
    3: ("–°–ª–µ–¥ –∏–∑ –ø–µ–ø–ª–∞", "5000 —Å–ª–æ–≤ —Ç–≤–æ–∏—Ö –∑–∞—Å—Ç—ã–ª–∏ –≤ –ø–µ–ø–ª–µ.", False),
    4: ("–î—ã—Ö–∞–Ω–∏–µ —Ç–µ–Ω–µ–π", "10000 —Å–æ–æ–±—â–µ–Ω–∏–π —Å–ª–∏—è–ª–∏—Å—å —Å —Ç—å–º–æ–π.", False),
    5: ("–ß—Ç–µ—Ü –∫–æ–¥–µ–∫—Å–∞", "–¢—ã –¥–æ—Å—Ç–∏–≥ 1000 –æ–ø—ã—Ç–∞ –∏ —É—Å–ª—ã—à–∞–ª –≥–æ–ª–æ—Å –ê—Ä—Ö–∏–≤–∞.", False),
    6: ("–ì–æ–ª–æ—Å –∏–∑ —Ç—å–º—ã", "–¢—ã –≤–ø–µ—Ä–≤—ã–µ —É—Å–ª—ã—à–∞–ª –æ–¥–æ–±—Ä–µ–Ω–∏–µ ‚Äî ¬´+¬ª.", False),
    7: ("–ö–ª–µ–π–º–æ –ø–æ–∑–æ—Ä–∞", "–ü–µ—Ä–≤—ã–π ¬´-¬ª –∫–æ—Å–Ω—É–ª—Å—è —Ç–≤–æ–µ–≥–æ –∏–º–µ–Ω–∏.", False),
    8: ("–•—Ä–∞–Ω–∏—Ç–µ–ª—å –∏—Å–∫—Ä—ã", "–¢—ã –æ–±—Ä—ë–ª —Ä–µ–ø—É—Ç–∞—Ü–∏—é +25.", False),
    9: ("–¢–µ–Ω—å —É –≤–æ—Ä–æ—Ç", "–¢—ã –ø–∞–ª –¥–æ —Ä–µ–ø—É—Ç–∞—Ü–∏–∏ -25.", False),
    10: ("–ò–¥—É—â–∏–π –≤ –ê—Ä—Ö–∏–≤", "–¢—ã –¥–æ—Å—Ç–∏–≥ —Ä–∞–Ω–≥–∞ ¬´–ü–ª–∞–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è¬ª.", False),
    11: ("–°–≤—è–∑–∞–Ω–Ω—ã–π –≤—Ä–µ–º–µ–Ω–µ–º", "–¢—ã –ø—Ä–æ–±—ã–ª –Ω–µ–¥–µ–ª—é –≤ –ê—Ä—Ö–∏–≤–µ.", False),
    12: ("–ì–æ–ª–æ—Å –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–∞", "–¢—ã —Ç—Ä–∏–∂–¥—ã –≤—ã–∑–≤–∞–ª –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ.", False),
    13: ("–ù–∞–ø–µ—Ä—Å–Ω–∏–∫ –ê—Ä—Ö–∏–≤–∞", "–¢–≤–æ—è —Ä–µ–ø—É—Ç–∞—Ü–∏—è –≤–æ–∑–Ω–µ—Å–ª–∞—Å—å –¥–æ +100.", False),
    14: ("–ó–∞–∫–ª–µ–π–º–µ–Ω–Ω—ã–π", "–¢–≤–æ—ë –∏–º—è –ø–æ–≥–ª–æ—Ç–∏–ª–∞ –º–µ—Ç–∫–∞ -100.", False),
    15: ("–û–∫–æ –ê—Ä—Ö–∏–≤–∞", "–¢—ã –≤–æ—à—ë–ª –≤ —Ç–æ–ø-3 –ª–∏–¥–µ—Ä–æ–≤.", False),
    16: ("–°–ª–æ–º–∞–Ω–Ω—ã–π –∫—Ä—É–≥", "–¢—ã –≤—ã–Ω–µ—Å –ø—Ä–∏–≥–æ–≤–æ—Ä —Å–∞–º —Å–µ–±–µ ‚Äî ¬´-¬ª.", True),
    17: ("–ü—Ä–∏–∑—Ä–∞–∫ –≤ —Å–µ—Ç–∏", "–¢—ã –≤–æ–∑–∑–≤–∞–ª –∫ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º —á–µ—Ä–µ–∑ /report.", True),
    18: ("–ì–ª–∞—Å –∏–∑–≤–Ω–µ", "–¢—ã –ø–æ–∑–≤–∞–ª –ê—Ä—Ö–∏–≤ —Ä–æ–≤–Ω–æ –≤ 03:33.", True),
    19: ("–ó–∞–±—ã—Ç—ã–π –∫–ª—é—á", "–¢—ã –¥–æ—Å—Ç–∏–≥ —Å—Ç—Ä–∞–Ω–Ω–æ–π –æ—Ç–º–µ—Ç–∫–∏: 6666xp.", True),
    20: ("–ü–æ—Ä–æ–≥ –ê—Ä—Ö–∏–≤–∞", "–¢—ã —Å—Ç–∞–ª –ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–º‚Ä¶", True),
}

# === –ë–ê–ó–ê ===
async def init_db():
    async with aiosqlite.connect("gothic_users.db") as db:
        await db.execute("""
        CREATE TABLE IF NOT EXISTS users (
            user_id INTEGER PRIMARY KEY,
            username TEXT,
            exp INTEGER DEFAULT 0,
            reputation INTEGER DEFAULT 0,
            last_message TIMESTAMP,
            achievements TEXT DEFAULT "",
            joined TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
            prorock_count INTEGER DEFAULT 0,
            messages_count INTEGER DEFAULT 0
        )
        """)
        await db.commit()

# === –õ–û–ì–ò–ö–ê ===
def get_rank(exp: int):
    rank_name = RANKS[0][0]
    for r, xp in RANKS:
        if exp >= xp: rank_name = r
    return rank_name

async def give_achievement(user_id: int, ach_id: int, message: types.Message):
    async with aiosqlite.connect("gothic_users.db") as db:
        cur = await db.execute("SELECT achievements FROM users WHERE user_id=?", (user_id,))
        row = await cur.fetchone()
        if not row: return
        already = row[0].split(",") if row[0] else []
        if str(ach_id) in already: return
        already.append(str(ach_id))
        await db.execute("UPDATE users SET achievements=? WHERE user_id=?", (",".join(already), user_id))
        await db.commit()
    name, desc, secret = ACHIEVEMENTS[ach_id]
    await message.reply(f"üèÖ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!\n<b>{name}</b>\n{desc}")

bot = Bot(token=API_TOKEN, parse_mode="HTML")
dp = Dispatcher()

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–æ–ø—ã—Ç/—Ä–µ–ø—É—Ç–∞—Ü–∏—è) ===
@dp.message(F.text & ~F.text.startswith("/"))
async def message_handler(message: types.Message):
    if message.chat.type not in ("group", "supergroup"): return
    uid = message.from_user.id
    uname = message.from_user.username or message.from_user.full_name
    async with aiosqlite.connect("gothic_users.db") as db:
        await db.execute("INSERT OR IGNORE INTO users (user_id, username) VALUES (?, ?)", (uid, uname))
        await db.commit()
        cur = await db.execute("SELECT exp, reputation, last_message, messages_count FROM users WHERE user_id=?", (uid,))
        exp, rep, last_msg, msgs = await cur.fetchone()
        msgs += 1
        now = datetime.now()
        if not last_msg or (now - datetime.fromisoformat(last_msg)).seconds > 180:
            exp += 5
        if message.text.strip() == "+":
            rep = min(rep + 1, 255); 
            if rep >= 1: await give_achievement(uid, 6, message)
            if rep >= 25: await give_achievement(uid, 8, message)
            if rep >= 100: await give_achievement(uid, 13, message)
        elif message.text.strip() == "-":
            rep = max(rep - 1, -255);
            if rep <= -1: await give_achievement(uid, 7, message)
            if rep <= -25: await give_achievement(uid, 9, message)
            if rep <= -100: await give_achievement(uid, 14, message)
        await db.execute("UPDATE users SET exp=?, reputation=?, last_message=?, username=?, messages_count=? WHERE user_id=?",
                         (exp, rep, now.isoformat(), uname, msgs, uid))
        await db.commit()
    if msgs == 100: await give_achievement(uid, 1, message)
    if msgs == 1000: await give_achievement(uid, 2, message)
    if msgs == 5000: await give_achievement(uid, 3, message)
    if msgs == 10000: await give_achievement(uid, 4, message)
    if exp >= 1000: await give_achievement(uid, 5, message)
    if exp == 6666: await give_achievement(uid, 19, message)
    if get_rank(exp) == "–ü–ª–∞–º—è –ø—Ä–æ–±—É–∂–¥–µ–Ω–∏—è": await give_achievement(uid, 10, message)
    if get_rank(exp) == "–ë–µ—Å—Å–º–µ—Ä—Ç–Ω—ã–π": await give_achievement(uid, 20, message)

# === –ö–æ–º–∞–Ω–¥—ã ===
@dp.message(Command("xp"))
async def cmd_xp(message: types.Message):
    uid = message.from_user.id
    async with aiosqlite.connect("gothic_users.db") as db:
        cur = await db.execute("SELECT exp, reputation, achievements FROM users WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        if not row: await message.reply("–¢—ã –µ—â—ë –Ω–µ –≤ –ê—Ä—Ö–∏–≤–µ."); return
        exp, rep, ach = row
        await message.reply(f"‚ú® –û–ø—ã—Ç: {exp}\nüèÜ –†–∞–Ω–≥: {get_rank(exp)}\nüìä –†–µ–ø—É—Ç–∞—Ü–∏—è: {rep}\nüéñ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–π: {len(ach.split(',')) if ach else 0}")

@dp.message(Command("leaders"))
async def cmd_leaders(message: types.Message):
    async with aiosqlite.connect("gothic_users.db") as db:
        cur = await db.execute("SELECT username, exp, reputation FROM users ORDER BY exp DESC, reputation DESC LIMIT 10")
        rows = await cur.fetchall()
    text = "üèÜ –î–æ—Å–∫–∞ –ª–∏–¥–µ—Ä–æ–≤:\n\n" + "\n".join([f"{i+1}. {u} ‚Äî {get_rank(xp)}, {xp}xp, —Ä–µ–ø {rep}" for i,(u,xp,rep) in enumerate(rows)])
    await message.reply(text)

@dp.message(Command("prorock"))
async def cmd_prorock(message: types.Message):
    uid = message.from_user.id
    async with aiosqlite.connect("gothic_users.db") as db:
        cur = await db.execute("SELECT prorock_count FROM users WHERE user_id=?", (uid,))
        r = await cur.fetchone()
        count = (r[0] if r else 0) + 1
        await db.execute("UPDATE users SET prorock_count=? WHERE user_id=?", (count, uid))
        await db.commit()
    if count == 3: await give_achievement(uid, 12, message)
    await message.reply(random.choice(PROPHECIES))

@dp.message(Command("achievements"))
async def cmd_achievements(message: types.Message):
    uid = message.from_user.id
    async with aiosqlite.connect("gothic_users.db") as db:
        cur = await db.execute("SELECT achievements FROM users WHERE user_id=?", (uid,))
        row = await cur.fetchone()
        if not row: await message.reply("–¢—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–∏–ª —Å–ª–µ–¥–∞ –≤ –ê—Ä—Ö–∏–≤–µ."); return
        user_ach = row[0].split(",") if row[0] else []
    text = "üéñÔ∏è <b>–î–æ—Å—Ç–∏–∂–µ–Ω–∏—è:</b>\n\n"
    for aid,(name,desc,secret) in ACHIEVEMENTS.items():
        if str(aid) in user_ach: text += f"‚úÖ <b>{name}</b>\n{desc}\n\n"
        else: text += f"‚ùå <b>{name if not secret else '???'}</b>\n{desc if not secret else '–°–∫—Ä—ã—Ç–æ'}\n\n"
    await message.reply(text)

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    if datetime.now().strftime("%H:%M") == "03:33": await give_achievement(message.from_user.id, 18, message)
    await message.reply("""
‚öîÔ∏è –ö–æ–º–∞–Ω–¥—ã:
/xp ‚Äî –æ–ø—ã—Ç, —Ä–∞–Ω–≥ –∏ —Ä–µ–ø—É—Ç–∞—Ü–∏—è
/leaders ‚Äî —Ç–æ–ø
/prorock ‚Äî –ø—Ä–æ—Ä–æ—á–µ—Å—Ç–≤–æ
/achievements ‚Äî —Ç–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/report ‚Äî –∂–∞–ª–æ–±–∞
/help ‚Äî –ø–æ–º–æ—â—å
""")

@dp.message(Command("report"))
async def cmd_report(message: types.Message):
    await give_achievement(message.from_user.id, 17, message)
    await message.reply("‚öîÔ∏è –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä—ã —É—Å–ª—ã—à–∞–ª–∏ —Ç–≤–æ–π –∑–æ–≤.")

# === –ú–æ–¥–µ—Ä–∞—Ü–∏—è ===
async def is_admin(message: types.Message):
    member = await bot.get_chat_member(message.chat.id, message.from_user.id)
    return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.OWNER]

@dp.message(Command("ban"))
async def cmd_ban(message: types.Message):
    if not await is_admin(message): await message.reply("üö´ –ù–µ—Ç –≤–ª–∞—Å—Ç–∏."); return
    if not message.reply_to_message: await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /ban –≤ –æ—Ç–≤–µ—Ç."); return
    u = message.reply_to_message.from_user; 
    await bot.ban_chat_member(message.chat.id, u.id)
    await message.reply(f"‚öîÔ∏è {u.full_name} –∏–∑–≥–Ω–∞–Ω —Å –ø–æ–∑–æ—Ä–æ–º!")

@dp.message(Command("unban"))
async def cmd_unban(message: types.Message):
    if not await is_admin(message): await message.reply("üö´ –ù–µ—Ç –≤–ª–∞—Å—Ç–∏."); return
    if not message.reply_to_message: await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /unban –≤ –æ—Ç–≤–µ—Ç."); return
    u = message.reply_to_message.from_user
    await bot.unban_chat_member(message.chat.id, u.id)
    await message.reply(f"üîì {u.full_name} –≤–æ–∑–≤—Ä–∞—â—ë–Ω –≤ –ê—Ä—Ö–∏–≤.")

@dp.message(Command("kik"))
async def cmd_kik(message: types.Message):
    if not await is_admin(message): await message.reply("üö´ –ù–µ—Ç –≤–ª–∞—Å—Ç–∏."); return
    if not message.reply_to_message: await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /kik –≤ –æ—Ç–≤–µ—Ç."); return
    u = message.reply_to_message.from_user
    await bot.ban_chat_member(message.chat.id, u.id); await bot.unban_chat_member(message.chat.id, u.id)
    await message.reply(f"üí® {u.full_name} –∏–∑–≥–Ω–∞–Ω –∏–∑ –ê—Ä—Ö–∏–≤–∞.")

@dp.message(Command("mute"))
async def cmd_mute(message: types.Message):
    if not await is_admin(message): await message.reply("üö´ –ù–µ—Ç –≤–ª–∞—Å—Ç–∏."); return
    if not message.reply_to_message: await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /mute <–º–∏–Ω—É—Ç—ã> –≤ –æ—Ç–≤–µ—Ç."); return
    args=message.text.split()
    if len(args)<2: await message.reply("–ü—Ä–∏–º–µ—Ä: /mute 60"); return
    try: minutes=int(args[1]); assert 1<=minutes<=60000
    except: await message.reply("–ú–∏–Ω—É—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 1 –¥–æ 60000."); return
    until=datetime.now()+timedelta(minutes=minutes)
    u=message.reply_to_message.from_user
    await bot.restrict_chat_member(message.chat.id,u.id,permissions=ChatPermissions(can_send_messages=False),until_date=until)
    await message.reply(f"üîá {u.full_name} –ª–∏—à—ë–Ω –≥–æ–ª–æ—Å–∞ –Ω–∞ {minutes} –º–∏–Ω—É—Ç.")

@dp.message(Command("unmute"))
async def cmd_unmute(message: types.Message):
    if not await is_admin(message): await message.reply("üö´ –ù–µ—Ç –≤–ª–∞—Å—Ç–∏."); return
    if not message.reply_to_message: await message.reply("–ò—Å–ø–æ–ª—å–∑—É–π: /unmute –≤ –æ—Ç–≤–µ—Ç."); return
    u=message.reply_to_message.from_user
    await bot.restrict_chat_member(message.chat.id,u.id,permissions=ChatPermissions(can_send_messages=True))
    await message.reply(f"üîä {u.full_name} —Å–Ω–æ–≤–∞ —É—Å–ª—ã—à–∞–Ω –ê—Ä—Ö–∏–≤–æ–º.")

# === START ===
async def main():
    await init_db()
    print("üî• Gothic Bot –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
